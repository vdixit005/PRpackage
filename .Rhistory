du <- ncol(U)
if(missing(f0)) f0 <- 1 + 0 * U[,1]
if(missing(w)) w <- function(i) 1 / (i + 1)
w <- function(i) 1 / (i + 1)
N <- nperm
N=1
perm <- matrix(0, n, N)
perm[,1] <- 1:n
f.avg = 0 * f0
L.avg = 0
if(du==1){
f0 = f0 / int(f0, U)
for(j in 1:N) {
f = f0
L = 0
x <- X[perm[,j],]
for(i in 1:n) {
num <- d(x[i,], Ut,...) * f
den <- int(num, U)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
return(list(f=f.avg, L=-L.avg))
}
j=1
x <- X[perm[,j],]
i=1
num <- d(x[i], Ut,...) * f
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0)
#' Basic PR (should work for univariate and bivariate)
#' specify the number of variables in U? "1", "2", "many" ?
#' U = mixing density support
#' 1 dim: equispaces, odd length vector
#' 2 dim: matrix, where each column is equispace, odd length vector
#' many: matrix, each row is a random sample
pr <- function(X, d, U, f0, w, nperm = 1, perm = NULL,...) {
X = as.matrix(X)
U = as.matrix(U)
n <- nrow(X)
t <- nrow(U)
du <- ncol(U)
if(missing(f0)) f0 <- 1 + 0 * U[,1]
if(missing(w)) w <- function(i) 1 / (i + 1)
N <- nperm
if(N == 1 && is.null(perm)) {
perm <- matrix(0, n, N)
perm[,1] <- 1:n}
else if(N > 1 && is.null(perm)) {
perm <- matrix(0, n, N)
perm[,1] <- 1:n
for(j in 2:N) perm[,j] <- sample(n)
}
f.avg = 0 * f0
L.avg = 0
if(du==1){
f0 = f0 / int(f0, U)
for(j in 1:N) {
f = f0
L = 0
x <- X[perm[,j],]
for(i in 1:n) {
num <- d(x[i], Ut,...) * f
den <- int(num, U)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
return(list(f=f.avg, L=-L.avg))
}
else if(du==2){
f0 = f0 / simp.int2(U[,1], U[,2], matrix(f0, t, t, byrow=TRUE))
U.l = as.matrix(expand.grid(U[,1],U[,2]))
for(j in 1:N) {
f = f0
L = 0
x <- X[perm[,j], ]
for(i in 1:n){
num = d(x[i,], U.l,...) * f
f_matrix = matrix(num, nrow = du, ncol = du, byrow=TRUE)
den = simp.int2(U[,1], U[,2], f_matrix)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
return(list(f=f.avg, L=-L.avg))
}
else {
D.avg = 0 * f0
for(j in 1:N) {
f = f0
L = 0
x <- X[perm[,j],]
D = 1
for(i in 1:n) {
num <- d(x[i,], U,...) * f
den <- (1/t)*sum(d(x[i,], U,...)*D)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
D = D*(1 + w(i)*(d(x[i,], U,...)/den - 1))
}
# Add D.avg
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
D.avg <- (j - 1) * D.avg / j + D / j
}
return(list(f=f.avg, L=-L.avg, D = D.avg))
}
}
devtools::document()
rm(list = ls())
# Trying out all functions in PRpackage
# Univariate implementation
U = seq(0, 1, length.out = 101)
f0 = dunif(U, min = 0, max = 1)
devtools::load_all()
# Generate data from a univariate mixture density
u = rbeta(n = 100, 2, 10)
x = rnorm(n = 100, mean = u, sd = 1)
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0)
devtools::load_all()
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0)
plot(U, ans1$f)
plot(U, ans1$f, type="l")
lines(U, dbeta(U, 2,10))
x = rnorm(n = 100, mean = u, sd = 0.1)
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0)
plot(U, ans1$f, type="l")
lines(U, dbeta(U, 2,10))
# Generate data from a univariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u |2, 10)
u = rbeta(n = 1000, 2, 10)
x = rnorm(n = 1000, mean = u, sd = 0.1)
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
plot(U, ans1$f, type="l")
lines(U, dbeta(U, 2,10))
lines(U, dbeta(U, 2,10), col = "red")
# Generate data from a univariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u |2, 10)
u = rbeta(n = 100, 2, 10)
x = rnorm(n = 100, mean = u, sd = 0.1)
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
plot(U, ans1$f, type="l")
lines(U, dbeta(U, 2,10), col = "red")
devtools::load_all()
summary(x)
hist(x)
X_sup = seq(-0.3, 1.3, length.out = 101)
mixture_density(pr.mix = ans1, U = U, d = d, X_sup = X_sup)
mixture_density <- function(pr.mix, U, d, X_sup,...){
U = as.matrix(U)
t <- nrow(U)
du <- ncol(U)
if(du==1){
mix = sapply(X_sup, 1, single.mix1, f = pr.mix$f.avg, U = U, d = d,...)
}
else if(du==2) {
mix = apply(X_sup, 1, single.mix2, f = pr.mix$f.avg, U = U, d = d, du = du,...)
} else {
mix = apply(X_sup, 1, single.mix.multi, U = U, D = pr.mix$D.avg, t = t, d = d,...)
}
return(mix)
}
devtools::load_all()
rm(list = ls())
devtools::load_all()
# Trying out all functions in PRpackage
# Univariate implementation
U = seq(0, 1, length.out = 101)
f0 = dunif(U, min = 0, max = 1)
# Generate data from a univariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u |2, 10)
u = rbeta(n = 100, 2, 10)
x = rnorm(n = 100, mean = u, sd = 0.1)
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
plot(U, ans1$f, type="l")
lines(U, dbeta(U, 2,10), col = "red")
X_sup = seq(-0.3, 1.3, length.out = 101)
mixture_density(pr.mix = ans1, U = U, d = d, X_sup = X_sup)
mixture_density(pr.mix = ans1, U = U, d = d, X_sup = X_sup)
devtools::load_all()
mixture_density(pr.mix = ans1, U = U, d = d, X_sup = X_sup)
mixture_density(pr.mix = ans1, U = U, d = dnorm, X_sup = X_sup, sd = 0.1)
plot(U, ans1$f, type="l")
lines(U, dbeta(U, 2,10), col = "red")
devtools::load_all()
mixture_density(pr.mix = ans1, U = U, d = dnorm, X_sup = X_sup, sd = 0.1)
devtools::load_all()
mixture_density(pr.mix = ans1, U = U, d = dnorm, X_sup = X_sup, sd = 0.1)
m1 = mixture_density(pr.mix = ans1, U = U, d = dnorm, X_sup = X_sup, sd = 0.1)
plot(X_sup, m, type = "l")
plot(X_sup, m1, type = "l")
plot(X_sup, m1$m, type = "l")
plot(U, dbeta(U, 10,2))
# Generate data from a bivariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u1 |2, 10) Beta(u2 | 10, 2)
u = cbind(rbeta(n = 100, 2, 10), rbeta(n = 100, 4, 4))
x = rnorm(n = 100, mean = u[,1], sd = u[,2])
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
j
j=1
X
X=x
x <- as.matrix(X[perm[,j], ])
perm <- matrix(0, n, N)
n=100
N=1
perm <- matrix(0, n, N)
perm[,1] <- 1:n}
perm[,1] <- 1:n
x <- as.matrix(X[perm[,j], ])
# Bivariate implementation
U = cbind(seq(0, 1, length.out = 101), seq(0, 1, length.out = 101))
f0 = rep(1, 101*101)
# Integration
simp.int2(U[,1], U[,2], matrix(f0, 101, 101, byrow=TRUE))
x = rnorm(n = 100, mean = u[,1], sd = u[,2])
# Generate data from a bivariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u1 |2, 10) Beta(u2 | 10, 2)
u = cbind(rbeta(n = 100, 2, 10), rbeta(n = 100, 4, 4))
x = rnorm(n = 100, mean = u[,1], sd = u[,2])
X=x
X = as.matrix(X)
U = as.matrix(U)
n <- nrow(X)
t <- nrow(U)
du <- ncol(U)
f0 = f0 / simp.int2(U[,1], U[,2], matrix(f0, t, t, byrow=TRUE))
U.l = as.matrix(expand.grid(U[,1],U[,2]))
j=1
f = f0
L = 0
x <- X[perm[,j], ]
x <- as,matrix(X[perm[,j], ])
x <- as.matrix(X[perm[,j], ])
x[1,]
devtools::load_all()
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
View(perm)
View(perm)
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
x = rnorm(n = 100, mean = u[,1], sd = u[,2])
X=x
d=d2
X = as.matrix(X)
U = as.matrix(U)
n <- nrow(X)
t <- nrow(U)
du <- ncol(U)
w <- function(i) 1 / (i + 1)
N=1
perm <- matrix(0, n, N)
perm[,1] <- 1:n
f.avg = 0 * f0
L.avg = 0
du==2
f0 = f0 / simp.int2(U[,1], U[,2], matrix(f0, t, t, byrow=TRUE))
simp.int2(U[,1], U[,2], matrix(f0, t, t, byrow=TRUE))
U.l = as.matrix(expand.grid(U[,1],U[,2]))
j=1
f = f0
L = 0
x <- as.matrix(X[perm[,j], ])
i=1
num = d(x[i,], U.l) * f
num
f_matrix = matrix(num, nrow = du, ncol = du, byrow=TRUE)
t*t
f_matrix = matrix(num, nrow = t, ncol = t, byrow=TRUE)
den = simp.int2(U[,1], U[,2], f_matrix)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
devtools::load_all()
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
library(ContourFunctions)
gcf_grid(U[,1], U[,2], matrix(ans2$f, 101, 101, byrow = TRUE))
# TRUTH
U.l = as.matrix(expand.grid(U[,1],U[,2]))
f.truth = dbeta(U.l[, 1], 2, 10) * dbeta(U.l[, 2], 4, 4)
gcf_grid(U[,1], U[,2], matrix(f.truth, 101, 101, byrow = TRUE))
gcf_grid(U[,1], U[,2], matrix(ans2$f, 101, 101, byrow = TRUE))
x = rnorm(n = 1000, mean = u[,1], sd = u[,2])
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
gcf_grid(U[,1], U[,2], matrix(ans2$f, 101, 101, byrow = TRUE))
# Generate data from a bivariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u1 |2, 10) Beta(u2 | 10, 2)
u = cbind(rbeta(n = 1000, 2, 10), rbeta(n = 1000, 4, 4))
x = rnorm(n = 1000, mean = u[,1], sd = u[,2])
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
library(ContourFunctions)
gcf_grid(U[,1], U[,2], matrix(ans2$f, 101, 101, byrow = TRUE))
gcf_grid(U[,1], U[,2], matrix(f.truth, 101, 101, byrow = TRUE))
# Generate data from a bivariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u1 |2, 10) Beta(u2 | 10, 2)
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
devtools::load_all()
# Generate data from a bivariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u1 |2, 10) Beta(u2 | 10, 2)
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
gcf_grid(U[,1], U[,2], matrix(ans2$f, 101, 101, byrow = TRUE))
gcf_grid(U[,1], U[,2], matrix(f.truth, 101, 101, byrow = TRUE))
summary(x)
X_sup = seq(-1.5, 2.7, length.out = 101)
X_sup = as.matrix(seq(-1.5, 2.7, length.out = 101))
apply(X[1:5,], 1, sum)
apply(X_sup[1:5,], 1, sum)
X_sup[1.]
X_sup[1,]
dim(X_sup)
apply(X_sup, 1, sum)
m1 = mixture_density(pr.mix = ans2, U = U, d = dnorm, X_sup = X_sup)
#' Calculates the mixture density at point x for bivariate U
single.mix2 = function(x, f, U, d, t,...){
U.l = as.matrix(expand.grid(U[,1],U[,2]))
num = d(x, U.l,...)*f
f_matrix = matrix(num, nrow = t, ncol = t, byrow=TRUE)
return(simp.int2(U[,1], U[,2], f_matrix))
}
mixture_density <- function(pr.mix, U, d, X_sup,...){
U = as.matrix(U)
t <- nrow(U)
du <- ncol(U)
if(du==1){
mix = sapply(X_sup, single.mix1, f = pr.mix$f, U = U, d = d,...)
}
else if(du==2) {
mix = apply(X_sup, 1, single.mix2, f = pr.mix$f, U = U, d = d, t = t,...)
} else {
mix = apply(X_sup, 1, single.mix.multi, U = U, D = pr.mix$D, t = t, d = d,...)
}
return(list(m = mix))
}
devtools::load_all()
rm(list = c("mixture_density", "single.mix2"))
m1 = mixture_density(pr.mix = ans2, U = U, d = dnorm, X_sup = X_sup)
plot(X_sup, m1, type="l")
plot(X_sup, m1$m, type="l")
devtools::load_all()
m.truth = mixture_density(f.truth, U, d = d2, X_sup)
lines(X_sup, m.truth, col = "red")
lines(X_sup, m.truth$m, col = "red")
plot(X_sup, m.truth$m, type="l")
lines(X_sup, m1$m, col = "red")
int(m1$m, X_sup)
int(m.truth$m, X_sup)
m.truth$m
X_sup[56]
X_sup
gcf_grid(U[,1], U[,2], matrix(f.truth, 101, 101, byrow = TRUE))
gcf_grid(U[,2], U[,1], matrix(f.truth, 101, 101, byrow = TRUE))
d2
m1 = mixture_density(pr.mix = ans2$f, U = U, d = d2, X_sup = X_sup)
m1 = mixture_density(f = ans2$f, U = U, d = d2, X_sup = X_sup)
plot(X_sup, m.truth$m, type="l")
f.truth = dbeta(U.l[, 1], 2, 10) * dbeta(U.l[, 2], 4, 4)
m.truth = mixture_density(f.truth, U, d = d2, X_sup)
plot(X_sup, m.truth$m, type="l")
lines(X_sup, m1$m, col = "red")
is.na(m.truth)
m.truth
X_sup[56]
U.l = as.matrix(expand.grid(U[,1],U[,2]))
num = d2(0.81, U.l)*f
sum(num)
num
which.max(num)
U.l[82,]
# Bivariate implementation
U = cbind(seq(0, 1, length.out = 101), seq(0.1, 1, length.out = 101))
# Integration
simp.int2(U[,1], U[,2], matrix(f0, 101, 101, byrow=TRUE))
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
# Bivariate implementation
U = cbind(seq(0, 1, length.out = 101), seq(10^-5, 1, length.out = 101))
# Integration
simp.int2(U[,1], U[,2], matrix(f0, 101, 101, byrow=TRUE))
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
gcf_grid(U[,1], U[,2], matrix(ans2$f, 101, 101, byrow = TRUE))
# TRUTH
U.l = as.matrix(expand.grid(U[,1],U[,2]))
f.truth = dbeta(U.l[, 1], 2, 10) * dbeta(U.l[, 2], 4, 4)
gcf_grid(U[,2], U[,1], matrix(f.truth, 101, 101, byrow = TRUE))
X_sup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m.truth = mixture_density(f.truth, U, d = d2, X_sup)
plot(X_sup, m.truth$m, type="l")
lines(X_sup, m1$m, col = "red")
m1$m
X_sup[56]
d2
U[,2]
mixture_density(ans2$f, U, d2, X_sup = 0.865)
single.mix2(x = 0.865, f = ans2$f, U = U, d = d2, t = t)
devtools::load_all()
m1 = mixture_density(f = ans2$f, U = U, d = d2, X_sup = X_sup)
lines(X_sup, m1$m, col = "red")
plot(X_sup, m.truth$m, type="l")
lines(X_sup, m1$m, col = "red")
###########################################################################################
# Multivariate implementation
d3 = function(x,u,...){
ans = numeric(length(u[,1]))
for(i in 1:length(u[,1])){
ans[i] = dsn(x, xi = u[i,1], omega = u[i,2], alpha = u[i,3])
}
return(ans)
}
t = 300
U = cbind(runif(t, min = 0, max = 10), runif(t, min = 0.3, max = 1.5), runif(t, min = -3, max = 3))
ans3 = pr.R(X = X, d = d3, U)
devtools::load_all()
ans3 = pr.R(X = X, d = d3, U)
ans3 = pr(X = X, d = d3, U)
###########################################################################################
# Multivariate implementation
library(sn)
ans3 = pr(X = X, d = d3, U)
devtools::load_all()
ans3 = pr(X = X, d = d3, U)
m3 = mixture_density(f = ans3$D, U = U, d = d3, X_sup = X_sup)
plot(X_sup, m.truth$m, type="l")
lines(X_sup, m1$m, col = "red")
lines(m3$m, col = "blue")
U = cbind(runif(t, min = 0, max = 1), runif(t, min = 0, max = 1), runif(t, min = 0, max = 1))
summary(x)
ans3 = pr(X = x, d = d3, U)
m3 = mixture_density(f = ans3$D, U = U, d = d3, X_sup = X_sup)
lines(m3$m, col = "blue")
d2
t = 3000
# Generate data from a bivariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u1 |2, 10) Beta(u2 | 10, 2)
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
t = 3000
U = cbind(runif(t, min = 0, max = 1), runif(t, min = 0, max = 1), runif(t, min = -4, max = 4))
devtools::load_all()
ans3 = pr(X = x, d = d3, U = U)
m3 = mixture_density(f = ans3$D, U = U, d = d3, X_sup = X_sup)
lines(m3$m, col = "blue")
plot(X_sup, m.truth$m, type="l")
lines(X_sup, m1$m, col = "red")
lines(m3$m, col = "blue")
plot(m3$m, type="l")
plot(X_sup, m3$m, type="l")
lines(X_sup, m.truth$m, col = "red")
plot(X_sup, m.truth$m, type="l")
lines(X_sup, m1$m, col = "red")
lines(X_sup, m3$m, col = "blue")
devtools::load_all()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
?mixture_density
getwd()
?pr
install.packages("PRpackage.tar", repos=NULL, type="source")
install.packages("PRpackage.tar", repos=NULL, type="source")
install.packages("C:/Users/vaide/Documents/PRpackage.tar", repos=NULL, type="source")
install.packages("C:/Users/vaide/Documents/PRpackage.tar", repos=NULL)
install.packages("C:/Users/vaide/Documents/PRpackage.tar", repos=NULL, type = "source")
install.packages("C:/Users/vaide/Documents/PRpackage.tar", source = TRUE, repos=NULL)
install.packages("C:/Users/vaide/Documents/PRpackage.tar.gz", source = TRUE, repos=NULL)
?pr
library(PRpackage)
?pr
?mixture_density
install.packages("C:/Users/vaide/Documents/PRpackage.tar.gz", repos=NULL, type="source")
library(PRpackage)
?pr
?mixture_density
library(roxygen2)
?pr
?pr
remove.packages("PRpackage")
install.packages("C:/Users/vaide/Documents/PRpackage.tar.gz", repos=NULL, type="source")
?pr
library(PRpackage)
?pr
?int
?mixture_density
?monotone
?simp.int2
single.mix1()
single.mix1
?single.mix1
?single.mix2
?single.mix.multi
?pr
remove.packages(PRpackage)
remove.packages("PRpackage")
devtools::install_github("PRpackage")
devtools::install_github("vdixit005/PRpackage")
