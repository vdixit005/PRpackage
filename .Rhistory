den = simp.int2(U[,2], U[,1], f_matrix)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
ans = list(U = U, f=f.avg, L=-L.avg)
class(ans) = "pr"
return(ans)
}
else {
D.avg = 0 * f0
for(j in 1:N) {
f = f0
L = 0
x <- as.matrix(X[perm[,j], ])
D = 1
for(i in 1:n) {
num <- d(x[i,], U,...) * f
den <- (1/t)*sum(d(x[i,], U,...)*D)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
D = D*(1 + w(i)*(d(x[i,], U,...)/den - 1))
}
# Add D.avg
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
D.avg <- (j - 1) * D.avg / j + D / j
}
ans = list(U = U, f=f.avg, L=-L.avg, D = D.avg)
class(ans) = "pr"
return(ans)
}
}
plot.pr = function(obj){
U = as.matrix(obj$U)
du = ncol(U)
if(du==1){
plot(U, obj$f, xlab = "U", ylab = "f", type = "l", main = "Estimated Mixing density")
}
else if(du==2) {
f.matrix = matrix(obj$f, nrow(U), nrow(U), byrow = TRUE)
gcf_grid(U[,2], U[,1], f.matrix)
}
else {
print("Plot yet to be decided")
}
}
plot(ans1)
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
plot(ans1)
lines(U, dbeta(U, 2,10), col = "red")
U = cbind(seq(0, 1, length.out = 101), seq(10^-5, 1, length.out = 101))
f0 = rep(1, 101*101)
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
library(ContourFunctions)
plot(ans2)
plot.pr = function(obj){
U = as.matrix(obj$U)
du = ncol(U)
if(du==1){
plot(U, obj$f, xlab = "U", ylab = "f", type = "l", main = "Estimated Mixing density")
}
else if(du==2) {
f.matrix = matrix(obj$f, nrow(U), nrow(U), byrow = TRUE)
gcf_grid(U[,2], U[,1], f.matrix, main = "")
}
else {
print("Plot yet to be decided")
}
}
plot(ans2)
plot.pr = function(obj){
U = as.matrix(obj$U)
du = ncol(U)
if(du==1){
plot(U, obj$f, xlab = "U", ylab = "f", type = "l", main = "Estimated Mixing density")
}
else if(du==2) {
f.matrix = matrix(obj$f, nrow(U), nrow(U), byrow = TRUE)
gcf_grid(U[,2], U[,1], f.matrix, mainminmax = FALSE)
}
else {
print("Plot yet to be decided")
}
}
plot(ans2)
plot.pr = function(obj){
U = as.matrix(obj$U)
du = ncol(U)
if(du==1){
plot(U, obj$f, xlab = "U", ylab = "f", type = "l", main = "Estimated Mixing density")
}
else if(du==2) {
f.matrix = matrix(obj$f, nrow(U), nrow(U), byrow = TRUE)
gcf_grid(U[,2], U[,1], f.matrix, mainminmax = FALSE, MAIN = "yay?")
}
else {
print("Plot yet to be decided")
}
}
plot(ans2)
plot.pr = function(obj){
U = as.matrix(obj$U)
du = ncol(U)
if(du==1){
plot(U, obj$f, xlab = "U", ylab = "f", type = "l", main = "Estimated Mixing density")
}
else if(du==2) {
f.matrix = matrix(obj$f, nrow(U), nrow(U), byrow = TRUE)
gcf_grid(U[,2], U[,1], f.matrix, mainminmax = FALSE, color.palette = function(x) rev(gray((1:x)/x)), bar = TRUE)
}
else {
print("Plot yet to be decided")
}
}
plot(ans2)
U.l = as.matrix(expand.grid(U[,1],U[,2]))
f.truth = dbeta(U.l[, 1], 2, 10) * dbeta(U.l[, 2], 4, 4)
gcf_grid(U[,2], U[,1], matrix(f.truth, 101, 101, byrow = TRUE))
library(sn)
d3 = function(x,u,...){
ans = numeric(length(u[,1]))
for(i in 1:length(u[,1])){
ans[i] = dsn(x, xi = u[i,1], omega = u[i,2], alpha = u[i,3])
}
return(ans)
}
#############################################################################################################################
#'@export
pr <- function(X, d, U, f0, w, nperm = 1, perm = NULL,...) {
X = as.matrix(X)
U = as.matrix(U)
n <- nrow(X)
t <- nrow(U)
du <- ncol(U)
if(missing(f0)) f0 <- 1 + 0 * U[,1]
if(missing(w)) w <- function(i) 1 / (i + 1)^{0.67}
N <- nperm
if(N == 1 && is.null(perm)) {
perm <- matrix(0, n, N)
perm[,1] <- 1:n}
else if(N > 1 && is.null(perm)) {
perm <- matrix(0, n, N)
perm[,1] <- 1:n
for(j in 2:N) perm[,j] <- sample(n)
}
f.avg = 0 * f0
L.avg = 0
if(du==1){
f0 = f0 / int(f0, U)
for(j in 1:N) {
f = f0
L = 0
x <- X[perm[,j],]
for(i in 1:n) {
num <- d(x[i], U,...) * f
den <- int(num, U)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
ans = list(U = U, f=f.avg, L=-L.avg)
class(ans) = "pr"
return(ans)
}
else if(du==2){
f0 = f0 / simp.int2(U[,2], U[,1], matrix(f0, t, t, byrow=TRUE))
U.l = as.matrix(expand.grid(U[,1],U[,2]))
for(j in 1:N) {
f = f0
L = 0
x <- as.matrix(X[perm[,j], ])
for(i in 1:n){
num = d(x[i,], U.l,...) * f
f_matrix = matrix(num, nrow = t, ncol = t, byrow=TRUE)
den = simp.int2(U[,2], U[,1], f_matrix)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
ans = list(U = U, f=f.avg, L=-L.avg)
class(ans) = "pr"
return(ans)
}
else {
D.avg = 0 * f0
for(j in 1:N) {
f = f0
L = 0
x <- as.matrix(X[perm[,j], ])
D = 1
for(i in 1:n) {
num <- d(x[i,], U,...) * f
den <- (1/t)*sum(d(x[i,], U,...)*D)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
D = D*(1 + w(i)*(d(x[i,], U,...)/den - 1))
}
# Add D.avg
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
D.avg <- (j - 1) * D.avg / j + D / j
}
ans = list(U = U, f=f.avg, L=-L.avg, D = D.avg)
class(ans) = "pr"
return(ans)
}
}
t = 3000
U = cbind(runif(t, min = 0, max = 1), runif(t, min = 0, max = 1), runif(t, min = -4, max = 4))
ans3 = pr(X = x, d = d3, U = U)
plot(ans3)
devtools::load_all()
read.dcf(system.file("DESCRIPTION", package = "ContourFunctions", mustWork = TRUE))
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
rm(list = c("plot.pr", "pr"))
devtools:document()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
remove.packages(PRpackage)
remove.packages("PRpackage")
devtools::install_github("vdixit005/PRpackage")
library(PRpackage)
?monotone
library(PRpackage)
library(PRpackage)
?monotone
?pr
devtools::install_github("vdixit005/PRpackage")
library(PRpackage)
?pr
remove.packages("PRpackage")
devtools::install_github("vdixit005/PRpackage")
library(PRpackage)
?pr
?monotone
remove.packages("PRpackage")
devtools::install_github("vdixit005/PRpackage")
?pr
library(PRpackage)
?pr
?monotone
n = 200
X = abs(rnorm(n))
m = monotone(X)
plot(m)
devtools::load_all()
devtools::document()
?monotone
n=200
X = abs(rnorm(n))
m = monotone(X)
plot(m)
?pr
remove.packages("PRpackage")
devtools::install_github("vdixit005/PRpackage")
library(PRpackage)
?monotone
n = 200
X = abs(rnorm(n))
m = monotone(X)
plot(m)
?pr
devtools::load_all()
devtools::document()
remove.packages("PRpackage")
devtools::install_github("vdixit005/PRpackage")
library(PRpackage)
?monotone
devtools::install_github("vdixit005/PRpackage")
library(PRpackage)
?pr
# Univariate implementation
U = seq(0, 1, length.out = 101)
f0 = dunif(U, min = 0, max = 1)
# Generate data from a univariate mixture density
u = rbeta(n = 1000, 2, 10)
x = rnorm(n = 1000, mean = u, sd = 0.1)
# PR estimate
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
plot(ans1)
lines(U, dbeta(U, 2,10), col = "red")
# Mixture density estimate
Xsup = seq(-0.3, 1.3, length.out = 101)
m1 = mixture_density(f = ans1$f, U = U, d = dnorm, Xsup = Xsup, sd = 0.1)
plot(m1)
devtools::load_all()
devtools::document()
remove.packages("PRpackage")
devtools::install_github("vdixit005/PRpackage")
library(PRpackage)
?pr
# Univariate implementation
U = seq(0, 1, length.out = 101)
f0 = dunif(U, min = 0, max = 1)
# Generate data from a univariate mixture density
u = rbeta(n = 1000, 2, 10)
x = rnorm(n = 1000, mean = u, sd = 0.1)
# PR estimate
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
plot(ans1)
lines(U, dbeta(U, 2,10), col = "red")
# Mixture density estimate
Xsup = seq(-0.3, 1.3, length.out = 101)
m1 = mixture_density(f = ans1$f, U = U, d = dnorm, Xsup = Xsup, sd = 0.1)
plot(m1)
# Bivariate implementation
U = cbind(seq(0, 1, length.out = 101), seq(10^-5, 1, length.out = 101))
f0 = rep(1, 101*101)
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
# Generate data from a bivariate mixture density
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
# PR estimate
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
plot(ans2)
# Mixture density estimate
Xsup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m2 = mixture_density(f = ans2$f, U = U, d = d2, Xsup = Xsup)
plot(m2)
library(sn)
d3 = function(x,u,...){
ans = numeric(length(u[,1]))
for(i in 1:length(u[,1])){
ans[i] = dsn(x, xi = u[i,1], omega = u[i,2], alpha = u[i,3])
}
return(ans)
}
# Generate particles from initial guess f0
t = 3000
U = cbind(runif(t, min = 0, max = 1), runif(t, min = 0, max = 1), runif(t, min = -4, max = 4))
# PR estimate
ans3 = pr(X = x, d = d3, U = U)
plot(ans3)
# Mixture density estimate
m3 = mixture_density(f = ans3$D, U = U, d = d3, Xsup = Xsup)
plot(m3)
?monotone
# To estimate a monotone density using PR
# Generate data
n = 200
X = abs(rnorm(n))
# Estimate
m = monotone(X)
# Plot with the truth
truth = 2*dnorm(m$Xsup)
plot(m)
lines(m$Xsup, m$m, col = "red")
plot(m)
lines(m$Xsup, truth, col = "red")
devtools::load_all()
devtools::document()
?pr
library(PRpackage)
?pr
devtools::load_all()
devtools::document()
remove.packages("PredictiveRecursion")
devtools::install_github("vdixit005/PredictiveRecursion")
?pr
library(PredictiveRecursion)
?pr
U = cbind(seq(0, 1, length.out = 101), seq(10^-5, 1, length.out = 101))
f0 = rep(1, 101*101)
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
plot(ans2)
Xsup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m2 = mixture_density(f = ans2$f, U = U, d = d2, Xsup = Xsup)
plot(m2)
library(Rcpp)
devtools::load_all()
?pr
?int
pr(X,d)
f = seq(1,5,length.out = 10)
U = seq(0,1, length.out = 10)
int(f,U)
devtools::document()
int(f,U)
devtools::load_all()
devtools::load_all()
install.packages("RcppExamples")
library(RcppExamples)
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
library(roxygen2)
devtools::document()
devtools::document()
devtools::document()
usethis::use_roxygen_md()
devtools::document()
devtools::document()
devtools::load_all()
devtools::document()
?pr
#' # Univariate implementation
#'U = seq(0, 1, length.out = 101)
#'f0 = dunif(U, min = 0, max = 1)
#'
#'# Generate data from a univariate mixture density
# True density = \int N(x | u, sd = 0.1) Beta(u |2, 10)
#'u = rbeta(n = 1000, 2, 10)
#'x = rnorm(n = 1000, mean = u, sd = 0.1)
#'
u = rbeta(n = 1000, 2, 10)
x = rnorm(n = 1000, mean = u, sd = 0.1)
require(sn)
d3 = function(x,u,...){
ans = numeric(length(u[,1]))
for(i in 1:length(u[,1])){
ans[i] = dsn(x, xi = u[i,1], omega = u[i,2], alpha = u[i,3])
}
return(ans)
}
t = 3000
U = cbind(runif(t, min = 0, max = 1), runif(t, min = 0, max = 1), runif(t, min = -4, max = 4))
ans3 = pr(X = x, d = d3, U = U)
plot(ans3)
devtools::load_all()
ans3 = pr(X = x, d = d3, U = U)
devtools::load_all()
ans3 = pr(X = x, d = d3, U = U)
devtools::load_all()
devtools::document()
?pr
d3 = function(x,u){
ans = numeric(length(u[,0]))
for(i in 1:length(u[,1])){
ans[i] = dsn(x, xi = u[i,0], omega = u[i,1], alpha = u[i,2])
}
return(ans)
}
ans3 = pr(X = x, d = d3, U = U)
X = rmvnorm(n=1000, mu = c(0.5,0.5,0), sigma = diag(3))
library(Rfast)
X = rmvnorm(n=1000, mu = c(0.5,0.5,0), sigma = diag(3))
d = function(x,u){
return(dmvnorm(x, mu=u, sigma = diag(3)))
}
ans3 = pr(X = X, d = d, U = U)
dsn(X[1,1], U[1,])
d3 = function(x,u){
ans = dsn(x, xi = u[i,1], omega = u[i,2], alpha = u[i,3])
return(ans)
}
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4));
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
ans3 = pr(X = x, d = d3, U = U)
d3 = function(x,u){
ans = dsn(x, xi = u[1], omega = u[2], alpha = u[3])
return(ans)
}
ans3 = pr(X = x, d = d3, U = U)
m3 = mixture_density(f = ans3$D, U = U, d = d3, Xsup = Xsup)
Xsup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m3 = mixture_density(f = ans3$D, U = U, d = d3, Xsup = Xsup)
plot(m3)
?pr
U = cbind(seq(0, 1, length.out = 101), seq(10^-5, 1, length.out = 101))
f0 = rep(1, 101*101)
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
m2 = mixture_density(f = ans2$f, U = U, d = d2, Xsup = Xsup)
plot(m2)
devtools::load_all()
devtools::document()
?pr
# Univariate implementation
U = seq(0, 1, length.out = 101)
f0 = dunif(U, min = 0, max = 1)
# Generate data from a univariate mixture density
u = rbeta(n = 1000, 2, 10)
x = rnorm(n = 1000, mean = u, sd = 0.1)
require(sn)
d3 = function(x,u){
ans = dsn(x, xi = u[1], omega = u[2], alpha = u[3])
return(ans)
}
t = 3000
U = cbind(runif(t, min = 0, max = 1), runif(t, min = 0, max = 1), runif(t, min = -4, max = 4))
ans3 = pr(X = x, d = d3, U = U)
plot(ans3)
Xsup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m3 = mixture_density(f = ans3$D, U = U, d = d3, Xsup = Xsup)
plot(m3)
