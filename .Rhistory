devtools::load_all()
devtools::document()
ans3 = pr(X = x, d = d3, U = U)
devtools::load_all()
?pr
ans3 = pr(X = x, d = d3, U = U)
# Univariate implementation
U = seq(0, 1, length.out = 101)
f0 = dunif(U, min = 0, max = 1)
# Generate data from a univariate mixture density
u = rbeta(n = 1000, 2, 10)
x = rnorm(n = 1000, mean = u, sd = 0.1)
# PR estimate
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
devtools::load_all()
# PR estimate
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
plot(ans1)
lines(U, dbeta(U, 2,10), col = "red")
# Mixture density estimate
Xsup = seq(-0.3, 1.3, length.out = 101)
m1 = mixture_density(f = ans1$f, U = U, d = dnorm, Xsup = Xsup, sd = 0.1)
plot(m1)
# Bivariate implementation
U = cbind(seq(0, 1, length.out = 101), seq(10^-5, 1, length.out = 101))
f0 = rep(1, 101*101)
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
# Generate data from a bivariate mixture density
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
# PR estimate
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
plot(ans2)
# Mixture density estimate
Xsup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m2 = mixture_density(f = ans2$f, U = U, d = d2, Xsup = Xsup)
plot(m2)
# Multivariate implementation
require(sn)
d3 = function(x,u){
ans = dsn(x, xi = u[1], omega = u[2], alpha = u[3])
return(ans)
}
# Generate particles from initial guess f0
t = 3000
U = cbind(runif(t, min = 0, max = 1), runif(t, min = 0, max = 1), runif(t, min = -4, max = 4))
ans3 = pr(X = x, d = d3, U = U)
?pr_cpp
devtools::load_all(".")
library(PredictiveRecursion)
devtools::document()
ans3 = pr(X = x, d = d3, U = U)
devtools::load_all(".")
devtools::load_all()
devtools::document()
library(PredictiveRecursion)
# Generate data from a bivariate mixture density
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
require(sn)
d3 = function(x,u){
ans = dsn(x, xi = u[1], omega = u[2], alpha = u[3])
return(ans)
}
# Generate particles from initial guess f0
t = 3000
U = cbind(runif(t, min = 0, max = 1), runif(t, min = 0, max = 1), runif(t, min = -4, max = 4))
ans3 = pr(X = x, d = d3, U = U)
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::load_all()
library(PredictiveRecursion)
devtools::document()
devtools::load_all()
?mixture_density
?pr
# Bivariate Normal example
# True mixture will be with a bivariate Normal kernel
# and we mix over all the 5 parameters
# See how the method does as compared to the DP mixtures
library(Rfast)
##############################################
# Second set of mixing distributions
u12 = function(n){
ans = sample(c(0, 15), size = n, prob = c(0.3, 0.7), replace = TRUE)
return(ans)
}
u22 = function(n){
ans = sample(c(0, 5), size = n, prob = c(0.3, 0.7), replace = TRUE)
return(ans)
}
u32 = function(n,s){
return(rgamma(n, shape = s, rate = 1))
}
u42 = function(n){
return(rbeta(n, 5,10))
}
k1 = function(u,n){
X = matrix(0, n, 2)
for(i in 1:n){
X[i,] = rmvnorm(1, mu = c(u[i,1], u[i,2]),
sigma = matrix(c(u[i,3], u[i,4]*sqrt(u[i,3]*u[i,5]), u[i,4]*sqrt(u[i,3]*u[i,5]), u[i, 5]),2,2))
}
return(X)
}
d1.package = function(x,u){
mu = u[1:2]
v.par = abs(c(u[3], u[5]))
cor.par = exp(u[4])/(1 + exp(u[4]))
ans = Rfast::dmvnorm(x, mu = mu,
sigma = matrix(c(v.par[1], cor.par*sqrt(prod(v.par)), cor.par*sqrt(prod(v.par)), v.par[2]),2,2))
return(ans)
}
# Generating data
n = 500
Udata = cbind(u12(n), u22(n), u32(n, s = 1), u42(n), u32(n, s = 5))
X = k1(Udata, n)
# PR implementation
t = 500
Ut = cbind(runif(t, min = -5, max = 20), runif(t, min = -10, max = 15),
runif(t, 0, 6), runif(t, 0, 1), runif(t, 0, 14))
f0 <- 1 + 0 * Ut[,1]
s1 = seq(-5, 20, length.out = 31)
s2 = seq(-5, 15, length.out = 31)
X_sup = as.matrix(expand.grid(s1,s2))
Xsup = cbind(s1, s2)
f = pr(X = X, d = d1.package, U = Ut, f0 = f0, nperm = 1)
m = mixture_density(f = f$D, U = Ut, d = d1.package, Xsup = Xsup)
m$mix
s1.1=unique(X_sup[,1])
s2.1=unique(X_sup[,2])
s1==s1.1
s2==s2.1
devtools::load_all()
devtools::document()
?mixture_density
##############################################
# Second set of mixing distributions
u12 = function(n){
ans = sample(c(0, 15), size = n, prob = c(0.3, 0.7), replace = TRUE)
return(ans)
}
u22 = function(n){
ans = sample(c(0, 5), size = n, prob = c(0.3, 0.7), replace = TRUE)
return(ans)
}
u32 = function(n,s){
return(rgamma(n, shape = s, rate = 1))
}
u42 = function(n){
return(rbeta(n, 5,10))
}
k1 = function(u,n){
X = matrix(0, n, 2)
for(i in 1:n){
X[i,] = rmvnorm(1, mu = c(u[i,1], u[i,2]),
sigma = matrix(c(u[i,3], u[i,4]*sqrt(u[i,3]*u[i,5]), u[i,4]*sqrt(u[i,3]*u[i,5]), u[i, 5]),2,2))
}
return(X)
}
# Multivariate normal kernel that takes in variables and transforms them
d1 = function(x,U){
lu = length(U[,1])
ans = numeric(lu)
for(i in 1:lu){
mu = U[i,1:2]
v.par = abs(c(U[i,3], U[i,5]))
cor.par = exp(U[i,4])/(1 + exp(U[i,4]))
ans[i] = dmvnorm(x, mu = mu,
sigma = matrix(c(v.par[1], cor.par*sqrt(prod(v.par)), cor.par*sqrt(prod(v.par)), v.par[2]),2,2))
}
return(ans)
}
d1.package = function(x,u){
mu = u[1:2]
v.par = abs(c(u[3], u[5]))
cor.par = exp(u[4])/(1 + exp(u[4]))
ans = Rfast::dmvnorm(x, mu = mu,
sigma = matrix(c(v.par[1], cor.par*sqrt(prod(v.par)), cor.par*sqrt(prod(v.par)), v.par[2]),2,2))
return(ans)
}
# Generating data
n = 500
Udata = cbind(u12(n), u22(n), u32(n, s = 1), u42(n), u32(n, s = 5))
X = k1(Udata, n)
# PR implementation
t = 500
Ut = cbind(runif(t, min = -5, max = 20), runif(t, min = -10, max = 15),
runif(t, 0, 6), runif(t, 0, 1), runif(t, 0, 14))
f0 <- 1 + 0 * Ut[,1]
s1 = seq(-5, 20, length.out = 31)
s2 = seq(-5, 15, length.out = 31)
Xsup = cbind(s1, s2)
f = pr(X = X, d = d1.package, U = Ut, f0 = f0, nperm = 1)
plot(f)
m = mixture_density(f = f$D, U = Ut, d = d1.package, Xsup = Xsup)
m$mix
View(d1.package)
try = apply(Ut, 1, d1.package, x = X_sup[1,])
sum(apply(Ut, 1, d1.package, x = X_sup[1,]))
sum(try*f$D)
?pr
sapply(U[,1], dnorm, x = x, sd = 1)
sapply(Ut[,1], dnorm, x = x, sd = 1)
sapply(Ut[,1], dnorm, x = 2, sd = 1)
devtools::load_all()
devtools::document()
##############################################
# Second set of mixing distributions
u12 = function(n){
ans = sample(c(0, 15), size = n, prob = c(0.3, 0.7), replace = TRUE)
return(ans)
}
u22 = function(n){
ans = sample(c(0, 5), size = n, prob = c(0.3, 0.7), replace = TRUE)
return(ans)
}
u32 = function(n,s){
return(rgamma(n, shape = s, rate = 1))
}
u42 = function(n){
return(rbeta(n, 5,10))
}
k1 = function(u,n){
X = matrix(0, n, 2)
for(i in 1:n){
X[i,] = rmvnorm(1, mu = c(u[i,1], u[i,2]),
sigma = matrix(c(u[i,3], u[i,4]*sqrt(u[i,3]*u[i,5]), u[i,4]*sqrt(u[i,3]*u[i,5]), u[i, 5]),2,2))
}
return(X)
}
d1.package = function(x,u){
mu = u[1:2]
v.par = abs(c(u[3], u[5]))
cor.par = exp(u[4])/(1 + exp(u[4]))
ans = Rfast::dmvnorm(x, mu = mu,
sigma = matrix(c(v.par[1], cor.par*sqrt(prod(v.par)), cor.par*sqrt(prod(v.par)), v.par[2]),2,2))
return(ans)
}
# Generating data
n = 500
Udata = cbind(u12(n), u22(n), u32(n, s = 1), u42(n), u32(n, s = 5))
X = k1(Udata, n)
# PR implementation
t = 500
Ut = cbind(runif(t, min = -5, max = 20), runif(t, min = -10, max = 15),
runif(t, 0, 6), runif(t, 0, 1), runif(t, 0, 14))
f0 <- 1 + 0 * Ut[,1]
s1 = seq(-5, 20, length.out = 31)
s2 = seq(-5, 15, length.out = 31)
Xsup = cbind(s1, s2)
f = pr(X = X, d = d1.package, U = Ut, f0 = f0, nperm = 1)
m = mixture_density(f = f$D, U = Ut, d = d1.package, Xsup = Xsup)
plot(m)
pr.begin = Sys.time()
f = pr(X = X, d = d1.package, U = Ut, f0 = f0, nperm = 1)
m = mixture_density(f = f$D, U = Ut, d = d1.package, Xsup = Xsup)
pr.end = Sys.time()
pr.end-pr.begin
pr.begin = Sys.time()
f = pr(X = X, d = d1.package, U = Ut, f0 = f0, nperm = 1)
pr.end = Sys.time()
pr.end-pr.begin
# key.axes = axis(4, seq(0, 0.02, by = 0.1),cex.axis = 2, asp=2))
#######################################################################################################################################################
t = 20000
Ut = cbind(runif(t, min = -4, max = 4), runif(t, min = -4, max = 4), runif(t, min = -2, max = 5),
runif(t, min = 0, max = 4), runif(t, min = -2, max = 2),
runif(t, min = 0, max = 4), runif(t, min = -2, max = 2),
runif(t, min = -2, max = 2),
runif(t, min = 0, max = 5))
# Mixing distribution on \mu and \sigma
d_all.one.pkg = function(x, u){
sigma.lay = upper_tri(x=c(3,3), diag= TRUE)
#dmvnorm(x, mu = u[1:3], sigma = as.matrix(nearPD(matrix(u[4:12],3,3))$mat))
mvnfast::dmvn(x, mu = u[1:3], sigma = upper_tri.assign(sigma.lay, v = u[4:9], diag = TRUE), isChol = TRUE)
}
t.begin = Sys.time()
f = pr(X = X, d = d_all.one.pkg, U = Ut)
t.ed = Sys.time()
######################
##### DATA ###########
######################
# Reading in the pine dataset
data("longleaf")
load("~/ryan martin/work4-PRticlefilter/Allmixing.RData")
t = 20000
Ut = cbind(runif(t, min = -4, max = 4), runif(t, min = -4, max = 4), runif(t, min = -2, max = 5),
runif(t, min = 0, max = 4), runif(t, min = -2, max = 2),
runif(t, min = 0, max = 4), runif(t, min = -2, max = 2),
runif(t, min = -2, max = 2),
runif(t, min = 0, max = 5))
# Mixing distribution on \mu and \sigma
d_all.one.pkg = function(x, u){
sigma.lay = upper_tri(x=c(3,3), diag= TRUE)
#dmvnorm(x, mu = u[1:3], sigma = as.matrix(nearPD(matrix(u[4:12],3,3))$mat))
mvnfast::dmvn(x, mu = u[1:3], sigma = upper_tri.assign(sigma.lay, v = u[4:9], diag = TRUE), isChol = TRUE)
}
t.begin = Sys.time()
f = pr(X = X, d = d_all.one.pkg, U = Ut)
t.ed = Sys.time()
t.ed - t.begin
mark = seq(2.1, 70, length.out = 71)
#########################
# Update filter, method 2
#########################
summary(f$f)
f$f
imp = Ut[which(f$f > quantile(f$f,0.9)),]
center = kmeans(imp, centers = 3)
p = t*center$size / sum(center$size)
Utnew = rbind(rmvnorm(p[1], mu = center$centers[1,], sigma = as.matrix(nearPD(V)$mat)),
rmvnorm(p[2], mu = center$centers[2,], sigma = as.matrix(nearPD(V)$mat)),
rmvnorm(p[3], mu = center$centers[3,], sigma = as.matrix(nearPD(V)$mat)))
library(Matrix)
Utnew = rbind(rmvnorm(p[1], mu = center$centers[1,], sigma = as.matrix(nearPD(V)$mat)),
rmvnorm(p[2], mu = center$centers[2,], sigma = as.matrix(nearPD(V)$mat)),
rmvnorm(p[3], mu = center$centers[3,], sigma = as.matrix(nearPD(V)$mat)))
Utnew[,4] = abs(Utnew[,4])
Utnew[,6] = abs(Utnew[,6])
Utnew[,9] = abs(Utnew[,9])
f0 = (p[1]/t)*dmvnorm(Utnew, mu = center$centers[1,], sigma = as.matrix(nearPD(2*V)$mat)) +
(p[2]/t)*dmvnorm(Utnew, mu = center$centers[2,], sigma = as.matrix(nearPD(2*V)$mat)) +
(p[3]/t)*dmvnorm(Utnew, mu = center$centers[3,], sigma = as.matrix(nearPD(2*V)$mat))
f0 = t*f0/sum(f0)
fnew = pr(X = X, d = d_all.one.pkg, U = Utnew)
par(mfrow = c(2,2))
par(mar = c(5.1, 5, 4.1, 2.1))
mark = seq(2.1, 70, length.out = 101)
# 185, 87
X1 = cbind(rep(185,101), rep(87, 101), mark)
X1 = cbind(X1[,1]/200, X1[,2]/200, X1[,3])
X1 = cbind(logit(X1[,1]), logit(X1[,2]), log(X1[,3] - 2))
mnew1 = mixture_density(f = fnew$D, U = Utnew, d = d_all.one.pkg, Xsup = X1)
plot(mark, mnew1/int(mnew1, mark), type="l", main ="", ylab = "conditional mark density",
cex.lab = 2, cex.axis = 2, ylim = c(0,0.028))
plot(mark, mnew1$mix/int(mnew1$mix, mark), type="l", main ="", ylab = "conditional mark density",
cex.lab = 2, cex.axis = 2, ylim = c(0,0.028))
dev.off()
plot(mark, mnew1$mix/int(mnew1$mix, mark), type="l", main ="", ylab = "conditional mark density",
cex.lab = 2, cex.axis = 2, ylim = c(0,0.028))
X2 = cbind(rep(81,101), rep(120, 101), mark)
X2 = cbind(X2[,1]/200, X2[,2]/200, X2[,3])
X2 = cbind(logit(X2[,1]), logit(X2[,2]), log(X2[,3] - 2))
library(car)
X1 = cbind(rep(185,101), rep(87, 101), mark)
X1 = cbind(X1[,1]/200, X1[,2]/200, X1[,3])
X1 = cbind(logit(X1[,1]), logit(X1[,2]), log(X1[,3] - 2))
X1 = cbind(rep(185,101), rep(87, 101), mark)
X1 = cbind(X1[,1]/200, X1[,2]/200, X1[,3])
X1 = cbind(logit(X1[,1]), logit(X1[,2]), log(X1[,3] - 2))
mnew1 = mixture_density(f = fnew$D, U = Utnew, d = d_all.one.pkg, Xsup = X1)
plot(mark, mnew1$mix/int(mnew1$mix, mark), type="l", main ="", ylab = "conditional mark density",
cex.lab = 2, cex.axis = 2, ylim = c(0,0.028))
X2 = cbind(rep(81,101), rep(120, 101), mark)
X2 = cbind(X2[,1]/200, X2[,2]/200, X2[,3])
X2 = cbind(logit(X2[,1]), logit(X2[,2]), log(X2[,3] - 2))
mnew2 = mixture_estimate2(d=d_all, X2, Utnew, fnew$D, sigma.lay=sigma.lay)
mnew2 = mixture_density(f = fnew$D, U = Utnew, d = d_all.one.pkg, Xsup = X2)
plot(mark, mnew2$mix/int(mnew2$mix, mark), type="l", main="", ylab = "conditional mark density",
cex.lab = 2, cex.axis = 2, ylim = c(0, 0.024))
# 105, 140
X3 = cbind(rep(105,101), rep(140, 101), mark)
X3 = cbind(X3[,1]/200, X3[,2]/200, X3[,3])
X3 = cbind(logit(X3[,1]), logit(X3[,2]), log(X3[,3] - 2))
mnew3 = mixture_density(f = fnew$D, U = Utnew, d = d_all.one.pkg, Xsup = X3)
plot(mark, mnew3$mix/int(mnew3$mix, mark), type="l", main="", ylab = "conditional mark density",
cex.lab = 2, cex.axis = 2, ylim = c(0,0.03))
# 50, 100
X4 = cbind(rep(50, 101), rep(100, 101), mark)
X4 = cbind(X4[,1]/200, X4[,2]/200, X4[,3])
X4 = cbind(logit(X4[,1]), logit(X4[,2]), log(X4[,3] - 2))
mnew4 = mixture_density(f = fnew$D, U = Utnew, d = d_all.one.pkg, Xsup = X4)
plot(mark, mnew4$mix/int(mnew4$mix, mark), type="l", main="", ylab = "conditional mark density",
cex.lab = 2, cex.axis = 2)
rm(list = ls())
remove.packages("PredictiveRecursion")
library(PredictiveRecursion)
?pr
library(PredictiveRecursion)
?pr
U = cbind(seq(0, 1, length.out = 101), seq(10^-5, 1, length.out = 101))
f0 = rep(1, 101*101)
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
plot(ans2)
Xsup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m2 = mixture_density(f = ans2$f, U = U, d = d2, Xsup = Xsup)
plot(m2)
source("~/Documents/GitHub/PredictiveRecursion/R/mixture_density.R")
#'
#' Calculates the mixture density at a user-defined grid of points given a mixing density
#'
#'@param f Vector of mixing density values or vector of particle approximation over support U
#'@param U Mixing density support, where U is a
#' \itemize{
#' \item Equispaced and odd length vector for univariate f
#' \item Matrix of two columns, where each column is the support for the corresponding variate for bivariate f
#' \item A matrix where each row is a random sample from f0 for multivariate f
#' }
#'@param d Parametric kernel function of form d(x,U)
#'Dixit, Vaidehi, and Ryan Martin. "Estimating a mixing
#'distribution on the sphere using predictive recursion."
#'Sankhya B (2022): 1-31.
#'
#'Dixit, Vaidehi, and Ryan Martin. "A PRticle filter algorithm for
#' nonparametric estimation of multivariate mixing distributions."
#' arXiv preprint arXiv:2204.01646 (2022).
#'
#'############################################################################################################################
#'@export
pr <- function(X, d, U, f0, w, nperm = 1, perm = NULL,...) {
X = as.matrix(X)
U = as.matrix(U)
n <- nrow(X)
t <- nrow(U)
du <- ncol(U)
if(missing(f0)) f0 <- 1 + 0 * U[,1]
if(missing(w)) w <- function(i) 1 / (i + 1)^{0.67}
N <- nperm
if(N == 1 && is.null(perm)) {
perm <- matrix(0, n, N)
perm[,1] <- 1:n}
else if(N > 1 && is.null(perm)) {
perm <- matrix(0, n, N)
perm[,1] <- 1:n
for(j in 2:N) perm[,j] <- sample(n)
}
f.avg = 0 * f0
L.avg = 0
if(du==1){
f0 = f0 / int(f0, U)
for(j in 1:N) {
f = f0
L = 0
x <- X[perm[,j],]
for(i in 1:n) {
num <- d(x[i], U,...) * f
den <- int(num, U)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
ans = list(U = U, f=f.avg, L=-L.avg)
class(ans) = "pr"
return(ans)
}
else if(du==2){
f0 = f0 / simp.int2(U[,2], U[,1], matrix(f0, t, t, byrow=TRUE))
U.l = as.matrix(expand.grid(U[,1],U[,2]))
for(j in 1:N) {
f = f0
L = 0
x <- as.matrix(X[perm[,j], ])
for(i in 1:n){
num = d(x[i,], U.l,...) * f
f_matrix = matrix(num, nrow = t, ncol = t, byrow=TRUE)
den = simp.int2(U[,2], U[,1], f_matrix)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
ans = list(U = U, f=f.avg, L=-L.avg)
class(ans) = "pr"
return(ans)
}
else {
# D.avg = 0 * f0
# for(j in 1:N) {
#   f = f0
#   L = 0
#   x <- as.matrix(X[perm[,j], ])
#   D = 1
#   for(i in 1:n) {
#     num <- d(x[i,], U,...) * f
#     den <- (1/t)*sum(d(x[i,], U,...)*D)
#     L <- L + log(den)
#     f <- (1 - w(i)) * f + w(i) * num / den
#     D = D*(1 + w(i)*(d(x[i,], U,...)/den - 1))
#
#   }
#   # Add D.avg
#   f.avg <- (j - 1) * f.avg / j + f / j
#   L.avg <- (j - 1) * L.avg / j + L / j
#   D.avg <- (j - 1) * D.avg / j + D / j
w.vec = w(1:n)
cpp.final = pr_cpp(f0, U, X, d, N, w.vec)
ans = list(U = U, f=cpp.final$f, L=-cpp.final$L, D = cpp.final$D)
class(ans) = "pr"
return(ans)
}
}
library(PredictiveRecursion)
?pr
library(PredictiveRecursion)
?pr
?mixture_density
getwd()
