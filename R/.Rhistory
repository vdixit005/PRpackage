f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j-1)*favg/j + f/j;
Lavg = (j-1)*Lavg/j + L/j;
Davg = (j-1)*Davg/j + D/j;
}
return Lavg;
}')
w = 1/((1:100) + 1)^0.67
U = seq(0,1,length.out = 101)
f0 = dunif(U)
X = rbeta(n=100,1,30)
d = function(x,u){
return(dunif(x, min = 0, max = u))
}
N = 2
L = pr_cpp(f0, U, X, d, N, w)
X = cbind(rbeta(n=100,1,30), rbeta(n=100,1,30))
U = cbind(seq(0,1,length.out = 101), seq(0,1,length.out = 101))
L = pr_cpp(f0, U, X, d, N, w)
cppFunction('
double pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (du,1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (du,0.0);
NumericVector num2 (du,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j-1)*favg/j + f/j;
Lavg = (j-1)*Lavg/j + L/j;
Davg = (j-1)*Davg/j + D/j;
}
return Lavg;
}')
L = pr_cpp(f0, U, X, d, N, w)
d = function(x,u){
return(dnorm(x, mean=u, sd = 1))
}
L = pr_cpp(f0, U, X, d, N, w)
cppFunction('NumericVector sum_cpp(NumericVector x) {
NumericVector y = x + 2.0;
return(y);
}')
sum_cpp(c(2,3))
cppFunction('NumericVector sum_cpp(NumericVector x) {
NumericVector y = x / 2.0;
return(y);
}')
sum_cpp(c(2,3))
cppFunction('NumericVector sum_cpp(NumericVector x) {
NumericVector y = sum(x);
return(y);
}')
cppFunction('NumericVector sum_cpp(NumericVector x) {
NumericVector y = Rcpp::sum(x);
return(y);
}')
cppFunction('double sum_cpp(NumericVector x) {
NumericVector y = Rcpp::sum(x);
return(y);
}')
cppFunction('double sum_cpp(NumericVector x) {
double y = Rcpp::sum(x);
return(y);
}')
sum_cpp(c(2,3))
d = function(x,u){
return(dnorm(x, mean=u, sd = 1))
}
cppFunction('double sum_cpp(NumericVector x, NumericVector u, Function z) {
double z = d(x,u);
return(z);
}')
cppFunction('double sum_cpp(NumericVector x, NumericVector u, Function d) {
double z = d(x,u);
return(z);
}')
cppFunction('double sum_cpp(NumericVector x, NumericVector u, Function d) {
double z = as<double>d(x,u);
return(z);
}')
cppFunction('double sum_cpp(NumericVector x, NumericVector u, Function d) {
z = as<double>d(x,u);
return(z);
}')
cppFunction('double sum_cpp(NumericVector x, NumericVector u, Function d) {
double z;
z = as<double>d(x,u);
return(z);
}')
cppFunction('double sum_cpp(int x, int u, Function d) {
double z;
z = d(x,u);
return(z);
}')
d(3,2)
typeof(d(3,2))
cppFunction('double sum_cpp(double x, double u, Function d) {
double z = d(x,u);
return(z);
}')
cppFunction('double sum_cpp(double x, double u, Function d) {
double z = d(x,u);
return z;
}')
cppFunction('
double sum_cpp(double x, double u, Function d) {
double z = d(x,u);
return z;
}')
cppFunction('
double sum_cpp(double x, double u, Function d) {
double z = 0.0;
z = d(x,u);
return z;
}')
cppFunction('
NumericMatrix trial_cpp(NumericVector x, NumericVector u, Function d) {
NumericMatrix kernel(2,2);
for(int i = 0; i < 2;i++){
for(int j = 0; j < 2; j++) {
kernel(i,j) = as<double>(d(x(i), u(j)));
}
}
return kernel;
}')
trial_cpp(c(1,2), c(0.5,0.3), d)
d(c(1,2), 0.5)
d(c(1,2), 0.3)
?dmvnorm
diag(2)
Rfast::dmvnorm(x=c(1,2), mu = c(0.5,0.4), sigma = diag(2))
d = function(x,u){
ans=Rfast::dmvnorm(x, mu = u, sigma = diag(2))
return(ans)
}
cppFunction('
double trial_cpp(NumericVector x, NumericVector u, Function d) {
double z;
z = d(x, u);
return z;
}')
cppFunction('
double pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (du,1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (du,0.0);
NumericVector num2 (du,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j-1)*favg/j + f/j;
Lavg = (j-1)*Lavg/j + L/j;
Davg = (j-1)*Davg/j + D/j;
}
return Lavg;
}')
L = pr_cpp(f0, U, X, d, N, w)
N = 1
L = pr_cpp(f0, U, X, d, N, w)
cppFunction('
double pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (du,1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i <= n; i++){
NumericVector num (du,0.0);
NumericVector num2 (du,0.0);
for(int k = 0; k <= t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j-1)*favg/j + f/j;
Lavg = (j-1)*Lavg/j + L/j;
Davg = (j-1)*Davg/j + D/j;
}
return Lavg;
}')
L = pr_cpp(f0, U, X, d, N, w)
cppFunction('
double pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (du,1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (t,0.0);
NumericVector num2 (t,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j-1)*favg/j + f/j;
Lavg = (j-1)*Lavg/j + L/j;
Davg = (j-1)*Davg/j + D/j;
}
return Lavg;
}')
L = pr_cpp(f0, U, X, d, N, w)
typeof(d)
typeof(d(X[1,], U[1,]))
cppFunction('
double pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (t, 1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (t,0.0);
NumericVector num2 (t,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j-1)*favg/j + f/j;
Lavg = (j-1)*Lavg/j + L/j;
Davg = (j-1)*Davg/j + D/j;
}
return Lavg;
}')
L = pr_cpp(f0, U, X, d, N, w)
ans=PredictiveRecursion::pr(X=X,d=d,U=U,f0=f0)
d
d = function(x,u){
ans=Rfast::dmvnorm(x, mu = u, sigma = diag(2))
return(ans)
}
ans=PredictiveRecursion::pr(X=X,d=d,U=U,f0=f0)
d2 = function(x,u){
ans = numeric(ncols(U))
for(i in 1:nrows(U)){
ans[i] = dmvnorm(x, mu = u[i,], sigma = diag(2))
}
return(ans)
}
ans=PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
d2 = function(x,u){
ans = numeric(nrow(U))
for(i in 1:nrow(U)){
ans[i] = dmvnorm(x, mu = u[i,], sigma = diag(2))
}
return(ans)
}
ans=PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
d2 = function(x,u){
ans = numeric(nrow(U))
for(i in 1:nrow(U)){
ans[i] = Rfast::dmvnorm(x, mu = u[i,], sigma = diag(2))
}
return(ans)
}
ans=PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
PredictiveRecursion::plot(ans)
plot(ans)
U = cbind(seq(0,1,length.out = 101), seq(0,1,length.out = 101), seq(0,1,length.out = 101))
f0 = dunif(U)
f0 = rep(1, 101)
X = cbind(rbeta(n=100,1,30), rbeta(n=100,1,30), rbeta(n=100,5,5))
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
d2 = function(x,u){
ans = numeric(nrow(U))
for(i in 1:nrow(U)){
ans[i] = Rfast::dmvnorm(x, mu = u[i,], sigma = diag(3))
}
return(ans)
}
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
plot(ans)
L = pr_cpp(f0, U, X, d, N, w)
d = function(x,u){
ans=Rfast::dmvnorm(x, mu = u, sigma = diag(3))
return(ans)
}
L = pr_cpp(f0, U, X, d, N, w)
L
cppFunction('
double pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (t, 1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (t,0.0);
NumericVector num2 (t,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j)*favg/(j+1) + f/(j+1);
Lavg = (j)*Lavg/(j+1) + L/(j+1);
Davg = (j)*Davg/(j+1) + D/(j+1);
}
return Lavg;
}')
L = pr_cpp(f0, U, X, d, N, w)
cppFunction('
List pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (t, 1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (t,0.0);
NumericVector num2 (t,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j)*favg/(j+1) + f/(j+1);
Lavg = (j)*Lavg/(j+1) + L/(j+1);
Davg = (j)*Davg/(j+1) + D/(j+1);
}
List final;
final("f") = favg;
final("L") = Lavg;
final("D") = Davg;
return final;
}')
L = pr_cpp(f0, U, X, d, N, w)
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
plot(U,ans$f,type="l")
plot(ans$f, L$f, type="l")
ans$f
L$f
plot(ans$D, L$D, type="l")
plot(ans$D, L$D)
U = cbind(seq(0,1,length.out = 101), seq(0,1,length.out = 101), seq(0,1,length.out = 101))
f0 = rep(1, 101)
X = cbind(rbeta(n=100,1,30), rbeta(n=100,1,30), rbeta(n=100,5,5))
w[1]
w = 1/((1:100) + 1)^0.67
L = pr_cpp(f0, U, X, d, N, w)
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
plot(U[,1], ans$f, type="l")
dev.off()
plot(U[,1], ans$f, type="l")
plot(U[,1], ans$f, type="l")
lines(U[,1], L$f, col="red")
cppFunction('
List pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0 + 0.0;
double L = 0.0;
NumericVector D (t, 1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (t,0.0);
NumericVector num2 (t,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j)*favg/(j+1) + f/(j+1);
Lavg = (j)*Lavg/(j+1) + L/(j+1);
Davg = (j)*Davg/(j+1) + D/(j+1);
}
List final;
final("f") = favg;
final("L") = Lavg;
final("D") = Davg;
return final;
}')
L = pr_cpp(f0, U, X, d, N, w)
plot(U[,1], ans$f, type="l")
lines(U[,1], L$f, col="red")
d = function(x,u){
ans=Rfast::dmvnorm(x, mu = u, sigma = diag(5))
return(ans)
}
U = matrix(runif(n=500*5), nrow = 500, ncol = 5)
f0 = rep(1, 500)
X = matrix(rbeta(n=1000*5,1,30), nrow = 1000, ncol = 5)
d = function(x,u){
ans=Rfast::dmvnorm(x, mu = u, sigma = diag(5))
return(ans)
}
L = pr_cpp(f0, U, X, d, N, w)
w = 1/((1:1000) + 1)^0.67
L = pr_cpp(f0, U, X, d, N, w)
d2 = function(x,u){
ans = numeric(nrow(U))
for(i in 1:nrow(U)){
ans[i] = Rfast::dmvnorm(x, mu = u[i,], sigma = diag(5))
}
return(ans)
}
l.start = Sys.time()
L = pr_cpp(f0, U, X, d, N, w)
l.end = Sys.time()
ans.start = Sys.time()
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
ans.end = Sys.time()
l.end-l.start
ans.end-ans.start
w <- function(i) 1 / (i + 1)^{0.67}
x(1:3)
w(1:3)
rm(list = ls())
