return Lavg;
}')
L = pr_cpp(f0, U, X, d, N, w)
typeof(d)
typeof(d(X[1,], U[1,]))
cppFunction('
double pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (t, 1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (t,0.0);
NumericVector num2 (t,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j-1)*favg/j + f/j;
Lavg = (j-1)*Lavg/j + L/j;
Davg = (j-1)*Davg/j + D/j;
}
return Lavg;
}')
L = pr_cpp(f0, U, X, d, N, w)
ans=PredictiveRecursion::pr(X=X,d=d,U=U,f0=f0)
d
d = function(x,u){
ans=Rfast::dmvnorm(x, mu = u, sigma = diag(2))
return(ans)
}
ans=PredictiveRecursion::pr(X=X,d=d,U=U,f0=f0)
d2 = function(x,u){
ans = numeric(ncols(U))
for(i in 1:nrows(U)){
ans[i] = dmvnorm(x, mu = u[i,], sigma = diag(2))
}
return(ans)
}
ans=PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
d2 = function(x,u){
ans = numeric(nrow(U))
for(i in 1:nrow(U)){
ans[i] = dmvnorm(x, mu = u[i,], sigma = diag(2))
}
return(ans)
}
ans=PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
d2 = function(x,u){
ans = numeric(nrow(U))
for(i in 1:nrow(U)){
ans[i] = Rfast::dmvnorm(x, mu = u[i,], sigma = diag(2))
}
return(ans)
}
ans=PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
PredictiveRecursion::plot(ans)
plot(ans)
U = cbind(seq(0,1,length.out = 101), seq(0,1,length.out = 101), seq(0,1,length.out = 101))
f0 = dunif(U)
f0 = rep(1, 101)
X = cbind(rbeta(n=100,1,30), rbeta(n=100,1,30), rbeta(n=100,5,5))
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
d2 = function(x,u){
ans = numeric(nrow(U))
for(i in 1:nrow(U)){
ans[i] = Rfast::dmvnorm(x, mu = u[i,], sigma = diag(3))
}
return(ans)
}
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
plot(ans)
L = pr_cpp(f0, U, X, d, N, w)
d = function(x,u){
ans=Rfast::dmvnorm(x, mu = u, sigma = diag(3))
return(ans)
}
L = pr_cpp(f0, U, X, d, N, w)
L
cppFunction('
double pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (t, 1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (t,0.0);
NumericVector num2 (t,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j)*favg/(j+1) + f/(j+1);
Lavg = (j)*Lavg/(j+1) + L/(j+1);
Davg = (j)*Davg/(j+1) + D/(j+1);
}
return Lavg;
}')
L = pr_cpp(f0, U, X, d, N, w)
cppFunction('
List pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0;
double L = 0.0;
NumericVector D (t, 1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (t,0.0);
NumericVector num2 (t,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j)*favg/(j+1) + f/(j+1);
Lavg = (j)*Lavg/(j+1) + L/(j+1);
Davg = (j)*Davg/(j+1) + D/(j+1);
}
List final;
final("f") = favg;
final("L") = Lavg;
final("D") = Davg;
return final;
}')
L = pr_cpp(f0, U, X, d, N, w)
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
plot(U,ans$f,type="l")
plot(ans$f, L$f, type="l")
ans$f
L$f
plot(ans$D, L$D, type="l")
plot(ans$D, L$D)
U = cbind(seq(0,1,length.out = 101), seq(0,1,length.out = 101), seq(0,1,length.out = 101))
f0 = rep(1, 101)
X = cbind(rbeta(n=100,1,30), rbeta(n=100,1,30), rbeta(n=100,5,5))
w[1]
w = 1/((1:100) + 1)^0.67
L = pr_cpp(f0, U, X, d, N, w)
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
plot(U[,1], ans$f, type="l")
dev.off()
plot(U[,1], ans$f, type="l")
plot(U[,1], ans$f, type="l")
lines(U[,1], L$f, col="red")
cppFunction('
List pr_cpp(NumericVector f0, NumericMatrix U, NumericMatrix X, Function d, int N, NumericVector w) {
int n = X.rows();
int du = U.cols();
int t = U.rows();
NumericVector favg = 0.0 * f0;
double Lavg = 0.0;
NumericVector Davg = 0.0 * f0;
for(int j = 0; j < N; j++){
NumericVector f = f0 + 0.0;
double L = 0.0;
NumericVector D (t, 1.0);
NumericMatrix kernel(n,t);
for(int i = 0; i < n; i++){
NumericVector num (t,0.0);
NumericVector num2 (t,0.0);
for(int k = 0; k < t; k++){
kernel(i , k) = as<double>(d(X( i , _ ), U( k , _ )));
num(k) = kernel(i , k)*f(k);
num2(k) = kernel(i , k)*D(k);
}
double den = Rcpp::sum(num2) / t;
L = L + log(den);
f = (1.0 - w(i))*f + w(i)*num / den;
D = D*(1.0 + w(i)*(kernel(i, _) / den - 1.0));
}
favg = (j)*favg/(j+1) + f/(j+1);
Lavg = (j)*Lavg/(j+1) + L/(j+1);
Davg = (j)*Davg/(j+1) + D/(j+1);
}
List final;
final("f") = favg;
final("L") = Lavg;
final("D") = Davg;
return final;
}')
L = pr_cpp(f0, U, X, d, N, w)
plot(U[,1], ans$f, type="l")
lines(U[,1], L$f, col="red")
d = function(x,u){
ans=Rfast::dmvnorm(x, mu = u, sigma = diag(5))
return(ans)
}
U = matrix(runif(n=500*5), nrow = 500, ncol = 5)
f0 = rep(1, 500)
X = matrix(rbeta(n=1000*5,1,30), nrow = 1000, ncol = 5)
d = function(x,u){
ans=Rfast::dmvnorm(x, mu = u, sigma = diag(5))
return(ans)
}
L = pr_cpp(f0, U, X, d, N, w)
w = 1/((1:1000) + 1)^0.67
L = pr_cpp(f0, U, X, d, N, w)
d2 = function(x,u){
ans = numeric(nrow(U))
for(i in 1:nrow(U)){
ans[i] = Rfast::dmvnorm(x, mu = u[i,], sigma = diag(5))
}
return(ans)
}
l.start = Sys.time()
L = pr_cpp(f0, U, X, d, N, w)
l.end = Sys.time()
ans.start = Sys.time()
ans = PredictiveRecursion::pr(X=X,d=d2,U=U,f0=f0)
ans.end = Sys.time()
l.end-l.start
ans.end-ans.start
w <- function(i) 1 / (i + 1)^{0.67}
x(1:3)
w(1:3)
rm(list = ls())
U = cbind(seq(0, 1, length.out = 101), seq(10^-5, 1, length.out = 101))
f0 = rep(1, 101*101)
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
#'Dixit, Vaidehi, and Ryan Martin. "Estimating a mixing
#'distribution on the sphere using predictive recursion."
#'Sankhya B (2022): 1-31.
#'
#'Dixit, Vaidehi, and Ryan Martin. "A PRticle filter algorithm for
#' nonparametric estimation of multivariate mixing distributions."
#' arXiv preprint arXiv:2204.01646 (2022).
#'
#'############################################################################################################################
#'@export
pr <- function(X, d, U, f0, w, nperm = 1, perm = NULL,...) {
X = as.matrix(X)
U = as.matrix(U)
n <- nrow(X)
t <- nrow(U)
du <- ncol(U)
if(missing(f0)) f0 <- 1 + 0 * U[,1]
if(missing(w)) w <- function(i) 1 / (i + 1)^{0.67}
N <- nperm
if(N == 1 && is.null(perm)) {
perm <- matrix(0, n, N)
perm[,1] <- 1:n}
else if(N > 1 && is.null(perm)) {
perm <- matrix(0, n, N)
perm[,1] <- 1:n
for(j in 2:N) perm[,j] <- sample(n)
}
f.avg = 0 * f0
L.avg = 0
if(du==1){
f0 = f0 / int(f0, U)
for(j in 1:N) {
f = f0
L = 0
x <- X[perm[,j],]
for(i in 1:n) {
num <- d(x[i], U,...) * f
den <- int(num, U)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
ans = list(U = U, f=f.avg, L=-L.avg)
class(ans) = "pr"
return(ans)
}
else if(du==2){
f0 = f0 / simp.int2(U[,2], U[,1], matrix(f0, t, t, byrow=TRUE))
U.l = as.matrix(expand.grid(U[,1],U[,2]))
for(j in 1:N) {
f = f0
L = 0
x <- as.matrix(X[perm[,j], ])
for(i in 1:n){
num = d(x[i,], U.l,...) * f
f_matrix = matrix(num, nrow = t, ncol = t, byrow=TRUE)
den = simp.int2(U[,2], U[,1], f_matrix)
L <- L + log(den)
f <- (1 - w(i)) * f + w(i) * num / den
}
f.avg <- (j - 1) * f.avg / j + f / j
L.avg <- (j - 1) * L.avg / j + L / j
}
ans = list(U = U, f=f.avg, L=-L.avg)
class(ans) = "pr"
return(ans)
}
else {
# D.avg = 0 * f0
# for(j in 1:N) {
#   f = f0
#   L = 0
#   x <- as.matrix(X[perm[,j], ])
#   D = 1
#   for(i in 1:n) {
#     num <- d(x[i,], U,...) * f
#     den <- (1/t)*sum(d(x[i,], U,...)*D)
#     L <- L + log(den)
#     f <- (1 - w(i)) * f + w(i) * num / den
#     D = D*(1 + w(i)*(d(x[i,], U,...)/den - 1))
#
#   }
#   # Add D.avg
#   f.avg <- (j - 1) * f.avg / j + f / j
#   L.avg <- (j - 1) * L.avg / j + L / j
#   D.avg <- (j - 1) * D.avg / j + D / j
w.vec = w(1:n)
cpp.final = pr_cpp(f0, U, X, d, N, w.vec)
ans = list(U = U, f=cpp.final$f, L=-cpp.final$L, D = cpp.final$D)
class(ans) = "pr"
return(ans)
}
}
#'#Plots the PR density function
#'@export
plot.pr = function(obj){
U = as.matrix(obj$U)
du = ncol(U)
if(du==1){
plot(U, obj$f, xlab = "U", ylab = "f", type = "l", main = "Estimated mixing density")
}
else if(du==2) {
f.matrix = matrix(obj$f, nrow(U), nrow(U), byrow = TRUE)
ContourFunctions::gcf_grid(U[,2], U[,1], f.matrix, mainminmax = FALSE, color.palette = function(x) rev(gray((1:x)/x)), bar = TRUE)
}
else {
print("Plot yet to be decided")
}
}
#' Auxiliary univariate numerical integration
#'
#' @param f Vector of values of function f at x
#' @param x Equispaced and odd length vector
#' @param tol Error tolerance
#'
#' @return Scalar value of numerical integration of function f over x
#'@export
int <- function(f, x, tol=1e-10) {
n <- length(x)
if(n == 1) return(0)
simp <- (sum(range(x[-1] - x[-n]) * c(-1, 1)) < tol)
if(!simp) out <- sum((f[-1] + f[-n]) * (x[-1] - x[-n])) / 2
else out <- ((x[2] - x[1]) / 3) * (sum(f) + sum(f[2:(n-1)]) + 2 * sum(f[seq(2, n-1, 2)]) )
return(out)
}
#' Auxiliary bivariate numerical integration
#'
#' @param x Equispaced vector
#' @param y Equispaced vector
#' @param Fxy Matrix of dimension dim(x) * dim(y) that contains values of f(x,y)
#' @param tol Error tolerance
#'
#' @return Scalar value of numerical integration of function f over x
#'@export
simp.int2 <- function(x, y, Fxy, tol=1e-10) {
n <- length(x); if(n %% 2 == 0) stop("need an odd number of grid points")
m <- length(y); if(m %% 2 == 0) stop("need an odd number of grid points")
check <- (sum(range(x[-1]-x[-n])*c(-1,1)) < tol) && (sum(range(y[-1]-y[-m])*c(-1,1)) < tol)
if(!check) stop("xy-grid must be equi-spaced")
h <- x[2] - x[1]  # spacings for x (assumed to be equi-spaced)
k <- y[2] - y[1]  # spacings for y
u <- c(1, rep(c(4,2), (n-3)/2), 4, 1)
v <- c(1, rep(c(4,2), (m-3)/2), 4, 1)
M <- outer(u, v, '*')
return(h * k * sum(M * Fxy) / 9)
}
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
plot(ans2)
U.l = as.matrix(expand.grid(U[,1],U[,2]))
f.truth = dbeta(U.l[, 1], 2, 10) * dbeta(U.l[, 2], 4, 4)
ContourFunctions::gcf_grid(U[,2], U[,1], matrix(f.truth, 101, 101, byrow = TRUE))
Xsup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m2 = mixture_density(f = ans2$f, U = U, d = d2, Xsup = Xsup)
# Usage
#'@export
mixture_density <- function(f, U, d, Xsup,...){
#'
#' @param x Single value at which the mixture density is to be calculated
#' @param f See documentation for mixture_density
#' @param U See documentation for mixture_density
#' @param d See documentation for mixture_density
#'
#' @return Mixture density calculated at x
#'
#'@seealso [pr()], [mixture_density()]
#'@export
single.mix1 = function(x, f, U, d,...){
#'
#' @param x Single value at which the mixture density is to be calculated
#' @param f See documentation for mixture_density
#' @param U See documentation for mixture_density
#' @param d See documentation for mixture_density
#' @param t Number of rows of U
#'
#' @return Mixture density calculated at x
#'@seealso [pr()], [mixture_density()]
#'@export
single.mix2 = function(x, f, U, d, t,...){
#'Plots the PR mixture density function
#'@export
plot.mixture = function(obj){
Xsup = obj$Xsup
dx = ncol(Xsup)
if(dx==1){
plot(Xsup, obj$mix, xlab = "X", ylab = "m", type = "l", main = "Estimated mixture density")
}
else if(dx==2) {
s1 = unique(Xsup[,1]) ; s2=unique(Xsup[,2])
m.matrix = matrix(obj$mix, length(s1), length(s2), byrow = TRUE)
ContourFunctions::gcf_grid(s2, s1, m.matrix, mainminmax = FALSE, color.palette = function(x) rev(gray((1:x)/x)), bar = TRUE)
}
else {
print("Plot yet to be decided")
}
}
}
}
}}}}}}
plot.mixture = function(obj){
Xsup = obj$Xsup
dx = ncol(Xsup)
if(dx==1){
plot(Xsup, obj$mix, xlab = "X", ylab = "m", type = "l", main = "Estimated mixture density")
}
else if(dx==2) {
s1 = unique(Xsup[,1]) ; s2=unique(Xsup[,2])
m.matrix = matrix(obj$mix, length(s1), length(s2), byrow = TRUE)
ContourFunctions::gcf_grid(s2, s1, m.matrix, mainminmax = FALSE, color.palette = function(x) rev(gray((1:x)/x)), bar = TRUE)
}
else {
print("Plot yet to be decided")
}
}
# Usage
#'@export
mixture_density <- function(f, U, d, Xsup,...){
}
mixture_density <- function(f, U, d, Xsup,...){
U = as.matrix(U)
Xsup = as.matrix(Xsup)
if(ncol(Xsup)==2) {
Xsup = as.matrix(expand.grid(Xsup[,1],Xsup[,2]))
}
t <- nrow(U)
du <- ncol(U)
if(du==1){
mix = sapply(Xsup, single.mix1, f = f, U = U, d = d,...)
}
else if(du==2) {
mix = apply(Xsup, 1, single.mix2, f = f, U = U, d = d, t = t,...)
} else {
mix = apply(Xsup, 1, single.mix.multi, U = U, D = f, t = t, d = d,...)
}
mix = list(Xsup = Xsup, mix = mix)
class(mix) = "mixture"
return(mix)
}
m2 = mixture_density(f = ans2$f, U = U, d = d2, Xsup = Xsup)
single.mix2 = function(x, f, U, d, t,...){
U.l = as.matrix(expand.grid(U[,1],U[,2]))
num = d(x=x, u=U.l)*f
f_matrix = matrix(num, nrow = t, ncol = t, byrow=TRUE)
return(simp.int2(U[,1], U[,2], f_matrix))
}
m2 = mixture_density(f = ans2$f, U = U, d = d2, Xsup = Xsup)
plot(m2)
Xsup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m2 = mixture_density(f = ans2$f, U = U, d = d2, Xsup = Xsup)
d2
