devtools::documentation()
devtools::document()
?int
?simp.int2
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr\
?pr
devtools::document()
?pr
u = rbeta(n = 100, 2, 10)
x = rnorm(n = 100, mean = u, sd = 0.1)
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
U = seq(0, 1, length.out = 101)
f0 = dunif(U, min = 0, max = 1)
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
plot(U, ans1$f, type="l")
lines(U, dbeta(U, 2,10), col = "red")
x = rnorm(n = 1000, mean = u, sd = 0.1)
u = rbeta(n = 1000, 2, 10)
x = rnorm(n = 1000, mean = u, sd = 0.1)
ans1 = pr(X = x, d = dnorm, U = U, f0 = f0, sd = 0.1)
plot(U, ans1$f, type="l")
lines(U, dbeta(U, 2,10), col = "red")
summary(x)
m1 = mixture_density(pr.mix = ans1$f, U = U, d = dnorm, X_sup = X_sup, sd = 0.1)
X_sup = seq(-0.3, 1.3, length.out = 101)
m1 = mixture_density(pr.mix = ans1$f, U = U, d = dnorm, X_sup = X_sup, sd = 0.1)
m1 = mixture_density(f = ans1$f, U = U, d = dnorm, X_sup = X_sup, sd = 0.1)
plot(X_sup, m1$m, type="l")
devtools::document()
?pr
U = cbind(seq(0, 1, length.out = 101), seq(10^-5, 1, length.out = 101))
f0 = rep(1, 101*101)
devtools::document()
?pr
u = cbind(rbeta(n = 2000, 2, 10), rbeta(n = 2000, 4, 4))
x = rnorm(n = 2000, mean = u[,1], sd = u[,2])
d2 = function(x,u){
return(dnorm(x, mean = u[,1], sd = u[,2]))
}
ans2 = pr(X = x, d = d2, U = U, f0 = f0)
gcf_grid(U[,1], U[,2], matrix(ans2$f, 101, 101, byrow = TRUE))
library(ContourFunctions)
gcf_grid(U[,1], U[,2], matrix(ans2$f, 101, 101, byrow = TRUE))
U.l = as.matrix(expand.grid(U[,1],U[,2]))
f.truth = dbeta(U.l[, 1], 2, 10) * dbeta(U.l[, 2], 4, 4)
gcf_grid(U[,2], U[,1], matrix(f.truth, 101, 101, byrow = TRUE))
X_sup = as.matrix(seq(-1.5, 2.8, length.out = 101))
m1 = mixture_density(f = ans2$f, U = U, d = d2, X_sup = X_sup)
plot(X_sup, m.truth$m, type="l")
m.truth = mixture_density(f.truth, U, d = d2, X_sup)
plot(X_sup, m.truth$m, type="l")
lines(X_sup, m1$m, col = "red")
devtools::document()
?pr
devtools::document()
?pr
t=3000
U = cbind(runif(t, min = 0, max = 1), runif(t, min = 0, max = 1), runif(t, min = -4, max = 4))
ans3 = pr(X = x, d = d3, U = U)
d3 = function(x,u,...){
ans = numeric(length(u[,1]))
for(i in 1:length(u[,1])){
ans[i] = dsn(x, xi = u[i,1], omega = u[i,2], alpha = u[i,3])
}
return(ans)
}
ans3 = pr(X = x, d = d3, U = U)
library(sn)
ans3 = pr(X = x, d = d3, U = U)
m3 = mixture_density(f = ans3$D, U = U, d = d3, X_sup = X_sup)
lines(X_sup, m3$m, col = "blue")
devtools::document()
?pr
devtools::document()
?pr
sum(c(2,3))
dsn(5)
library(sn)
dsn(5)
i?pr
?pr
#'Monotone density estimation using PR
#'
#'Estimates a monotone density via the PR algorithm
#'
#'
d.mon = function(x,u){ #uniform kernel
dunif(x, min = 0, max = u)
}
?pr
?mixturedensity
?mixture_density
devtools::document()
rm(list = c("d.mon"))
devtools::document()
?monotone
devtools::load_all()
?monotone
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
?monotone
devtools::document()
devtools::load_all()
devtools::load_all()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
vignette("roxygen2", package = "roxygen2")
library(roxygen2)
devtools::document()
?monotone
devtools::document()
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
devtools::document()
?monotone
X = rexp(n = 1000)
ans = monotone(X)
plot(ans$X_sup, ans$m, type="l")
ans$X_sup
ans$m
# Usage
mixture_density <- function(f, U, d, X_sup,...){
U = as.matrix(U)
t <- nrow(U)
du <- ncol(U)
if(du==1){
mix = sapply(X_sup, single.mix1, f = f, U = U, d = d,...)
}
else if(du==2) {
mix = apply(X_sup, 1, single.mix2, f = f, U = U, d = d, t = t,...)
} else {
mix = apply(X_sup, 1, single.mix.multi, U = U, D = f, t = t, d = d,...)
}
return(mix)
}
devtools::load_all()
rm(list = c("mixture_density"))
ans = monotone(X)
plot(ans$X_sup, ans$m, type="l")
lines(ans$X_sup, dexp(ans$X_sup), col="red")
?monotne
?monotone
?monotone
devtools::load_all()
?mixturedensity
devtools::load_all()
?mixture_density
devtools::document()
?mixture_density
devtools::document()
?mixture_density
devtools::document()
?mixture_density
devtools::document()
devtools::document()
?mixture_density
?single.mix1
devtools::document()
?single.mix1
devtools::document()
?single.mix1
devtools::document()
?single.mix1
?single.mix2
devtools::document()
?single.mix2
single.mix.multi
?single.mix.multi
mixture_density
?mixture_density
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
?int
?simp.int2
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
devtools::document()
?pr
?numint
?int
?simp.int2
?mixture_density
?mixture_density
devtools::document()
?mixture_density
devtools::document()
?mixture_density
?monotone
devtools::document()
?monotone
